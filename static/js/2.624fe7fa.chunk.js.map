{"version":3,"sources":["../node_modules/webpack/buildin/harmony-module.js","../node_modules/resumablejs/resumable.js","../node_modules/reactstrap/es/ListGroupItemHeading.js","../node_modules/reactstrap/es/ListGroupItemText.js"],"names":["module","exports","originalModule","webpackPolyfill","Object","create","children","defineProperty","enumerable","get","l","i","Resumable","opts","this","version","support","File","Blob","FileList","prototype","webkitSlice","mozSlice","slice","$","files","defaults","chunkSize","forceChunkSize","simultaneousUploads","fileParameterName","chunkNumberParameterName","chunkSizeParameterName","currentChunkSizeParameterName","totalSizeParameterName","typeParameterName","identifierParameterName","fileNameParameterName","relativePathParameterName","totalChunksParameterName","throttleProgressCallbacks","query","headers","preprocess","method","uploadMethod","testMethod","prioritizeFirstAndLastChunk","target","testTarget","parameterNamespace","testChunks","generateUniqueIdentifier","getTarget","maxChunkRetries","chunkRetryInterval","undefined","permanentErrors","maxFiles","withCredentials","xhrTimeout","clearInput","chunkFormat","setChunkTypeFromFile","maxFilesErrorCallback","errorCount","getOpt","alert","minFileSize","minFileSizeErrorCallback","file","fileName","name","$h","formatSize","maxFileSize","maxFileSizeErrorCallback","fileType","fileTypeErrorCallback","o","$opt","Array","options","each","option","ResumableChunk","fileObj","ResumableFile","resumableObj","events","on","event","callback","push","toLowerCase","fire","args","arguments","length","apply","stopEvent","e","stopPropagation","preventDefault","custom","relativePath","webkitRelativePath","size","replace","contains","array","test","result","value","toFixed","request","params","separator","indexOf","join","onDrop","dataTransfer","items","loadFiles","processItem","item","path","cb","entry","isFile","isDirectory","webkitGetAsEntry","directory","createReader","readEntries","entries","processCallbacks","map","bind","processDirectory","getAsFile","call","appendFilesFromFileList","fileList","removeFile","filesSkipped","remaining","decreaseReamining","window","setTimeout","fileTypeFound","index","extension","addFile","uniqueIdentifier","getFromUniqueIdentifier","f","container","srcElement","then","_prevProgress","_pause","_error","chunkEvent","message","abort","chunks","isComplete","abortCount","c","status","cancel","_chunks","uploadNextChunk","retry","bootstrap","firedRetry","upload","round","Math","ceil","floor","maxOffset","max","offset","progress","ret","error","isUploading","uploading","chunk","outstanding","preprocessState","pause","isPaused","fileObjSize","fileObjType","type","lastProgressCallback","Date","tested","retries","pendingRetry","loaded","startByte","endByte","min","xhr","XMLHttpRequest","testHandler","send","addEventListener","customQuery","k","v","encodeURIComponent","concat","filter","pair","open","timeout","customHeaders","setRequestHeader","preprocessFinished","doneHandler","retryInterval","reduce","func","bytes","data","FormData","append","fr","FileReader","onload","readAsDataURL","readyState","responseText","relative","factor","found","assignBrowse","domNodes","domNode","input","tagName","document","createElement","setAttribute","style","display","opacity","focus","click","appendChild","removeAttribute","fileTypes","assignDrop","unAssignDrop","removeEventListener","num","totalDone","totalSize","addFiles","splice","getSize","handleDropEvent","handleChangeEvent","updateQuery","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","n","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","propTypes","tag","className","a","any","cssModule","object","ListGroupItemHeading","props","Tag","attributes","classes","defaultProps","__webpack_exports__","ListGroupItemText"],"mappings":"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","file":"static/js/2.624fe7fa.chunk.js","sourcesContent":["module.exports = function (originalModule) {\n  if (!originalModule.webpackPolyfill) {\n    var module = Object.create(originalModule); // module.parent = undefined by default\n\n    if (!module.children) module.children = [];\n    Object.defineProperty(module, \"loaded\", {\n      enumerable: true,\n      get: function get() {\n        return module.l;\n      }\n    });\n    Object.defineProperty(module, \"id\", {\n      enumerable: true,\n      get: function get() {\n        return module.i;\n      }\n    });\n    Object.defineProperty(module, \"exports\", {\n      enumerable: true\n    });\n    module.webpackPolyfill = 1;\n  }\n\n  return module;\n};","/*\n* MIT Licensed\n* http://www.23developer.com/opensource\n* http://github.com/23/resumable.js\n* Steffen Tiedemann Christensen, steffen@23company.com\n*/\n(function () {\n  \"use strict\";\n\n  var Resumable = function Resumable(opts) {\n    if (!(this instanceof Resumable)) {\n      return new Resumable(opts);\n    }\n\n    this.version = 1.0; // SUPPORTED BY BROWSER?\n    // Check if these features are support by the browser:\n    // - File object type\n    // - Blob object type\n    // - FileList object type\n    // - slicing files\n\n    this.support = typeof File !== 'undefined' && typeof Blob !== 'undefined' && typeof FileList !== 'undefined' && (!!Blob.prototype.webkitSlice || !!Blob.prototype.mozSlice || !!Blob.prototype.slice || false);\n    if (!this.support) return false; // PROPERTIES\n\n    var $ = this;\n    $.files = [];\n    $.defaults = {\n      chunkSize: 1 * 1024 * 1024,\n      forceChunkSize: false,\n      simultaneousUploads: 3,\n      fileParameterName: 'file',\n      chunkNumberParameterName: 'resumableChunkNumber',\n      chunkSizeParameterName: 'resumableChunkSize',\n      currentChunkSizeParameterName: 'resumableCurrentChunkSize',\n      totalSizeParameterName: 'resumableTotalSize',\n      typeParameterName: 'resumableType',\n      identifierParameterName: 'resumableIdentifier',\n      fileNameParameterName: 'resumableFilename',\n      relativePathParameterName: 'resumableRelativePath',\n      totalChunksParameterName: 'resumableTotalChunks',\n      throttleProgressCallbacks: 0.5,\n      query: {},\n      headers: {},\n      preprocess: null,\n      method: 'multipart',\n      uploadMethod: 'POST',\n      testMethod: 'GET',\n      prioritizeFirstAndLastChunk: false,\n      target: '/',\n      testTarget: null,\n      parameterNamespace: '',\n      testChunks: true,\n      generateUniqueIdentifier: null,\n      getTarget: null,\n      maxChunkRetries: 100,\n      chunkRetryInterval: undefined,\n      permanentErrors: [400, 404, 415, 500, 501],\n      maxFiles: undefined,\n      withCredentials: false,\n      xhrTimeout: 0,\n      clearInput: true,\n      chunkFormat: 'blob',\n      setChunkTypeFromFile: false,\n      maxFilesErrorCallback: function maxFilesErrorCallback(files, errorCount) {\n        var maxFiles = $.getOpt('maxFiles');\n        alert('Please upload no more than ' + maxFiles + ' file' + (maxFiles === 1 ? '' : 's') + ' at a time.');\n      },\n      minFileSize: 1,\n      minFileSizeErrorCallback: function minFileSizeErrorCallback(file, errorCount) {\n        alert(file.fileName || file.name + ' is too small, please upload files larger than ' + $h.formatSize($.getOpt('minFileSize')) + '.');\n      },\n      maxFileSize: undefined,\n      maxFileSizeErrorCallback: function maxFileSizeErrorCallback(file, errorCount) {\n        alert(file.fileName || file.name + ' is too large, please upload files less than ' + $h.formatSize($.getOpt('maxFileSize')) + '.');\n      },\n      fileType: [],\n      fileTypeErrorCallback: function fileTypeErrorCallback(file, errorCount) {\n        alert(file.fileName || file.name + ' has type not allowed, please upload files of type ' + $.getOpt('fileType') + '.');\n      }\n    };\n    $.opts = opts || {};\n\n    $.getOpt = function (o) {\n      var $opt = this; // Get multiple option if passed an array\n\n      if (o instanceof Array) {\n        var options = {};\n        $h.each(o, function (option) {\n          options[option] = $opt.getOpt(option);\n        });\n        return options;\n      } // Otherwise, just return a simple option\n\n\n      if ($opt instanceof ResumableChunk) {\n        if (typeof $opt.opts[o] !== 'undefined') {\n          return $opt.opts[o];\n        } else {\n          $opt = $opt.fileObj;\n        }\n      }\n\n      if ($opt instanceof ResumableFile) {\n        if (typeof $opt.opts[o] !== 'undefined') {\n          return $opt.opts[o];\n        } else {\n          $opt = $opt.resumableObj;\n        }\n      }\n\n      if ($opt instanceof Resumable) {\n        if (typeof $opt.opts[o] !== 'undefined') {\n          return $opt.opts[o];\n        } else {\n          return $opt.defaults[o];\n        }\n      }\n    }; // EVENTS\n    // catchAll(event, ...)\n    // fileSuccess(file), fileProgress(file), fileAdded(file, event), filesAdded(files, filesSkipped), fileRetry(file),\n    // fileError(file, message), complete(), progress(), error(message, file), pause()\n\n\n    $.events = [];\n\n    $.on = function (event, callback) {\n      $.events.push(event.toLowerCase(), callback);\n    };\n\n    $.fire = function () {\n      // `arguments` is an object, not array, in FF, so:\n      var args = [];\n\n      for (var i = 0; i < arguments.length; i++) {\n        args.push(arguments[i]);\n      } // Find event listeners, and support pseudo-event `catchAll`\n\n\n      var event = args[0].toLowerCase();\n\n      for (var i = 0; i <= $.events.length; i += 2) {\n        if ($.events[i] == event) $.events[i + 1].apply($, args.slice(1));\n        if ($.events[i] == 'catchall') $.events[i + 1].apply(null, args);\n      }\n\n      if (event == 'fileerror') $.fire('error', args[2], args[1]);\n      if (event == 'fileprogress') $.fire('progress');\n    }; // INTERNAL HELPER METHODS (handy, but ultimately not part of uploading)\n\n\n    var $h = {\n      stopEvent: function stopEvent(e) {\n        e.stopPropagation();\n        e.preventDefault();\n      },\n      each: function each(o, callback) {\n        if (typeof o.length !== 'undefined') {\n          for (var i = 0; i < o.length; i++) {\n            // Array or FileList\n            if (callback(o[i]) === false) return;\n          }\n        } else {\n          for (i in o) {\n            // Object\n            if (callback(i, o[i]) === false) return;\n          }\n        }\n      },\n      generateUniqueIdentifier: function generateUniqueIdentifier(file, event) {\n        var custom = $.getOpt('generateUniqueIdentifier');\n\n        if (typeof custom === 'function') {\n          return custom(file, event);\n        }\n\n        var relativePath = file.webkitRelativePath || file.fileName || file.name; // Some confusion in different versions of Firefox\n\n        var size = file.size;\n        return size + '-' + relativePath.replace(/[^0-9a-zA-Z_-]/img, '');\n      },\n      contains: function contains(array, test) {\n        var result = false;\n        $h.each(array, function (value) {\n          if (value == test) {\n            result = true;\n            return false;\n          }\n\n          return true;\n        });\n        return result;\n      },\n      formatSize: function formatSize(size) {\n        if (size < 1024) {\n          return size + ' bytes';\n        } else if (size < 1024 * 1024) {\n          return (size / 1024.0).toFixed(0) + ' KB';\n        } else if (size < 1024 * 1024 * 1024) {\n          return (size / 1024.0 / 1024.0).toFixed(1) + ' MB';\n        } else {\n          return (size / 1024.0 / 1024.0 / 1024.0).toFixed(1) + ' GB';\n        }\n      },\n      getTarget: function getTarget(request, params) {\n        var target = $.getOpt('target');\n\n        if (request === 'test' && $.getOpt('testTarget')) {\n          target = $.getOpt('testTarget') === '/' ? $.getOpt('target') : $.getOpt('testTarget');\n        }\n\n        if (typeof target === 'function') {\n          return target(params);\n        }\n\n        var separator = target.indexOf('?') < 0 ? '?' : '&';\n        var joinedParams = params.join('&');\n        return target + separator + joinedParams;\n      }\n    };\n\n    var onDrop = function onDrop(event) {\n      $h.stopEvent(event); //handle dropped things as items if we can (this lets us deal with folders nicer in some cases)\n\n      if (event.dataTransfer && event.dataTransfer.items) {\n        loadFiles(event.dataTransfer.items, event);\n      } //else handle them as files\n      else if (event.dataTransfer && event.dataTransfer.files) {\n          loadFiles(event.dataTransfer.files, event);\n        }\n    };\n\n    var preventDefault = function preventDefault(e) {\n      e.preventDefault();\n    };\n    /**\n     * processes a single upload item (file or directory)\n     * @param {Object} item item to upload, may be file or directory entry\n     * @param {string} path current file path\n     * @param {File[]} items list of files to append new items to\n     * @param {Function} cb callback invoked when item is processed\n     */\n\n\n    function processItem(item, path, items, cb) {\n      var entry;\n\n      if (item.isFile) {\n        // file provided\n        return item.file(function (file) {\n          file.relativePath = path + file.name;\n          items.push(file);\n          cb();\n        });\n      } else if (item.isDirectory) {\n        // item is already a directory entry, just assign\n        entry = item;\n      } else if (item instanceof File) {\n        items.push(item);\n      }\n\n      if ('function' === typeof item.webkitGetAsEntry) {\n        // get entry from file object\n        entry = item.webkitGetAsEntry();\n      }\n\n      if (entry && entry.isDirectory) {\n        // directory provided, process it\n        return processDirectory(entry, path + entry.name + '/', items, cb);\n      }\n\n      if ('function' === typeof item.getAsFile) {\n        // item represents a File object, convert it\n        item = item.getAsFile();\n\n        if (item instanceof File) {\n          item.relativePath = path + item.name;\n          items.push(item);\n        }\n      }\n\n      cb(); // indicate processing is done\n    }\n    /**\n     * cps-style list iteration.\n     * invokes all functions in list and waits for their callback to be\n     * triggered.\n     * @param  {Function[]}   items list of functions expecting callback parameter\n     * @param  {Function} cb    callback to trigger after the last callback has been invoked\n     */\n\n\n    function processCallbacks(items, cb) {\n      if (!items || items.length === 0) {\n        // empty or no list, invoke callback\n        return cb();\n      } // invoke current function, pass the next part as continuation\n\n\n      items[0](function () {\n        processCallbacks(items.slice(1), cb);\n      });\n    }\n    /**\n     * recursively traverse directory and collect files to upload\n     * @param  {Object}   directory directory to process\n     * @param  {string}   path      current path\n     * @param  {File[]}   items     target list of items\n     * @param  {Function} cb        callback invoked after traversing directory\n     */\n\n\n    function processDirectory(directory, path, items, cb) {\n      var dirReader = directory.createReader();\n      dirReader.readEntries(function (entries) {\n        if (!entries.length) {\n          // empty directory, skip\n          return cb();\n        } // process all conversion callbacks, finally invoke own one\n\n\n        processCallbacks(entries.map(function (entry) {\n          // bind all properties except for callback\n          return processItem.bind(null, entry, path, items);\n        }), cb);\n      });\n    }\n    /**\n     * process items to extract files to be uploaded\n     * @param  {File[]} items items to process\n     * @param  {Event} event event that led to upload\n     */\n\n\n    function loadFiles(items, event) {\n      if (!items.length) {\n        return; // nothing to do\n      }\n\n      $.fire('beforeAdd');\n      var files = [];\n      processCallbacks(Array.prototype.map.call(items, function (item) {\n        // bind all properties except for callback\n        return processItem.bind(null, item, \"\", files);\n      }), function () {\n        if (files.length) {\n          // at least one file found\n          appendFilesFromFileList(files, event);\n        }\n      });\n    }\n\n    ;\n\n    var appendFilesFromFileList = function appendFilesFromFileList(fileList, event) {\n      // check for uploading too many files\n      var errorCount = 0;\n      var o = $.getOpt(['maxFiles', 'minFileSize', 'maxFileSize', 'maxFilesErrorCallback', 'minFileSizeErrorCallback', 'maxFileSizeErrorCallback', 'fileType', 'fileTypeErrorCallback']);\n\n      if (typeof o.maxFiles !== 'undefined' && o.maxFiles < fileList.length + $.files.length) {\n        // if single-file upload, file is already added, and trying to add 1 new file, simply replace the already-added file\n        if (o.maxFiles === 1 && $.files.length === 1 && fileList.length === 1) {\n          $.removeFile($.files[0]);\n        } else {\n          o.maxFilesErrorCallback(fileList, errorCount++);\n          return false;\n        }\n      }\n\n      var files = [],\n          filesSkipped = [],\n          remaining = fileList.length;\n\n      var decreaseReamining = function decreaseReamining() {\n        if (! --remaining) {\n          // all files processed, trigger event\n          if (!files.length && !filesSkipped.length) {\n            // no succeeded files, just skip\n            return;\n          }\n\n          window.setTimeout(function () {\n            $.fire('filesAdded', files, filesSkipped);\n          }, 0);\n        }\n      };\n\n      $h.each(fileList, function (file) {\n        var fileName = file.name;\n\n        if (o.fileType.length > 0) {\n          var fileTypeFound = false;\n\n          for (var index in o.fileType) {\n            var extension = '.' + o.fileType[index];\n\n            if (fileName.toLowerCase().indexOf(extension.toLowerCase(), fileName.length - extension.length) !== -1) {\n              fileTypeFound = true;\n              break;\n            }\n          }\n\n          if (!fileTypeFound) {\n            o.fileTypeErrorCallback(file, errorCount++);\n            return false;\n          }\n        }\n\n        if (typeof o.minFileSize !== 'undefined' && file.size < o.minFileSize) {\n          o.minFileSizeErrorCallback(file, errorCount++);\n          return false;\n        }\n\n        if (typeof o.maxFileSize !== 'undefined' && file.size > o.maxFileSize) {\n          o.maxFileSizeErrorCallback(file, errorCount++);\n          return false;\n        }\n\n        function addFile(uniqueIdentifier) {\n          if (!$.getFromUniqueIdentifier(uniqueIdentifier)) {\n            (function () {\n              file.uniqueIdentifier = uniqueIdentifier;\n              var f = new ResumableFile($, file, uniqueIdentifier);\n              $.files.push(f);\n              files.push(f);\n              f.container = typeof event != 'undefined' ? event.srcElement : null;\n              window.setTimeout(function () {\n                $.fire('fileAdded', f, event);\n              }, 0);\n            })();\n          } else {\n            filesSkipped.push(file);\n          }\n\n          ;\n          decreaseReamining();\n        } // directories have size == 0\n\n\n        var uniqueIdentifier = $h.generateUniqueIdentifier(file, event);\n\n        if (uniqueIdentifier && typeof uniqueIdentifier.then === 'function') {\n          // Promise or Promise-like object provided as unique identifier\n          uniqueIdentifier.then(function (uniqueIdentifier) {\n            // unique identifier generation succeeded\n            addFile(uniqueIdentifier);\n          }, function () {\n            // unique identifier generation failed\n            // skip further processing, only decrease file count\n            decreaseReamining();\n          });\n        } else {\n          // non-Promise provided as unique identifier, process synchronously\n          addFile(uniqueIdentifier);\n        }\n      });\n    }; // INTERNAL OBJECT TYPES\n\n\n    function ResumableFile(resumableObj, file, uniqueIdentifier) {\n      var $ = this;\n      $.opts = {};\n      $.getOpt = resumableObj.getOpt;\n      $._prevProgress = 0;\n      $.resumableObj = resumableObj;\n      $.file = file;\n      $.fileName = file.fileName || file.name; // Some confusion in different versions of Firefox\n\n      $.size = file.size;\n      $.relativePath = file.relativePath || file.webkitRelativePath || $.fileName;\n      $.uniqueIdentifier = uniqueIdentifier;\n      $._pause = false;\n      $.container = '';\n\n      var _error = uniqueIdentifier !== undefined; // Callback when something happens within the chunk\n\n\n      var chunkEvent = function chunkEvent(event, message) {\n        // event can be 'progress', 'success', 'error' or 'retry'\n        switch (event) {\n          case 'progress':\n            $.resumableObj.fire('fileProgress', $, message);\n            break;\n\n          case 'error':\n            $.abort();\n            _error = true;\n            $.chunks = [];\n            $.resumableObj.fire('fileError', $, message);\n            break;\n\n          case 'success':\n            if (_error) return;\n            $.resumableObj.fire('fileProgress', $); // it's at least progress\n\n            if ($.isComplete()) {\n              $.resumableObj.fire('fileSuccess', $, message);\n            }\n\n            break;\n\n          case 'retry':\n            $.resumableObj.fire('fileRetry', $);\n            break;\n        }\n      }; // Main code to set up a file object with chunks,\n      // packaged to be able to handle retries if needed.\n\n\n      $.chunks = [];\n\n      $.abort = function () {\n        // Stop current uploads\n        var abortCount = 0;\n        $h.each($.chunks, function (c) {\n          if (c.status() == 'uploading') {\n            c.abort();\n            abortCount++;\n          }\n        });\n        if (abortCount > 0) $.resumableObj.fire('fileProgress', $);\n      };\n\n      $.cancel = function () {\n        // Reset this file to be void\n        var _chunks = $.chunks;\n        $.chunks = []; // Stop current uploads\n\n        $h.each(_chunks, function (c) {\n          if (c.status() == 'uploading') {\n            c.abort();\n            $.resumableObj.uploadNextChunk();\n          }\n        });\n        $.resumableObj.removeFile($);\n        $.resumableObj.fire('fileProgress', $);\n      };\n\n      $.retry = function () {\n        $.bootstrap();\n        var firedRetry = false;\n        $.resumableObj.on('chunkingComplete', function () {\n          if (!firedRetry) $.resumableObj.upload();\n          firedRetry = true;\n        });\n      };\n\n      $.bootstrap = function () {\n        $.abort();\n        _error = false; // Rebuild stack of chunks from file\n\n        $.chunks = [];\n        $._prevProgress = 0;\n        var round = $.getOpt('forceChunkSize') ? Math.ceil : Math.floor;\n        var maxOffset = Math.max(round($.file.size / $.getOpt('chunkSize')), 1);\n\n        for (var offset = 0; offset < maxOffset; offset++) {\n          (function (offset) {\n            window.setTimeout(function () {\n              $.chunks.push(new ResumableChunk($.resumableObj, $, offset, chunkEvent));\n              $.resumableObj.fire('chunkingProgress', $, offset / maxOffset);\n            }, 0);\n          })(offset);\n        }\n\n        window.setTimeout(function () {\n          $.resumableObj.fire('chunkingComplete', $);\n        }, 0);\n      };\n\n      $.progress = function () {\n        if (_error) return 1; // Sum up progress across everything\n\n        var ret = 0;\n        var error = false;\n        $h.each($.chunks, function (c) {\n          if (c.status() == 'error') error = true;\n          ret += c.progress(true); // get chunk progress relative to entire file\n        });\n        ret = error ? 1 : ret > 0.99999 ? 1 : ret;\n        ret = Math.max($._prevProgress, ret); // We don't want to lose percentages when an upload is paused\n\n        $._prevProgress = ret;\n        return ret;\n      };\n\n      $.isUploading = function () {\n        var uploading = false;\n        $h.each($.chunks, function (chunk) {\n          if (chunk.status() == 'uploading') {\n            uploading = true;\n            return false;\n          }\n        });\n        return uploading;\n      };\n\n      $.isComplete = function () {\n        var outstanding = false;\n        $h.each($.chunks, function (chunk) {\n          var status = chunk.status();\n\n          if (status == 'pending' || status == 'uploading' || chunk.preprocessState === 1) {\n            outstanding = true;\n            return false;\n          }\n        });\n        return !outstanding;\n      };\n\n      $.pause = function (pause) {\n        if (typeof pause === 'undefined') {\n          $._pause = $._pause ? false : true;\n        } else {\n          $._pause = pause;\n        }\n      };\n\n      $.isPaused = function () {\n        return $._pause;\n      }; // Bootstrap and return\n\n\n      $.resumableObj.fire('chunkingStart', $);\n      $.bootstrap();\n      return this;\n    }\n\n    function ResumableChunk(resumableObj, fileObj, offset, callback) {\n      var $ = this;\n      $.opts = {};\n      $.getOpt = resumableObj.getOpt;\n      $.resumableObj = resumableObj;\n      $.fileObj = fileObj;\n      $.fileObjSize = fileObj.size;\n      $.fileObjType = fileObj.file.type;\n      $.offset = offset;\n      $.callback = callback;\n      $.lastProgressCallback = new Date();\n      $.tested = false;\n      $.retries = 0;\n      $.pendingRetry = false;\n      $.preprocessState = 0; // 0 = unprocessed, 1 = processing, 2 = finished\n      // Computed properties\n\n      var chunkSize = $.getOpt('chunkSize');\n      $.loaded = 0;\n      $.startByte = $.offset * chunkSize;\n      $.endByte = Math.min($.fileObjSize, ($.offset + 1) * chunkSize);\n\n      if ($.fileObjSize - $.endByte < chunkSize && !$.getOpt('forceChunkSize')) {\n        // The last chunk will be bigger than the chunk size, but less than 2*chunkSize\n        $.endByte = $.fileObjSize;\n      }\n\n      $.xhr = null; // test() makes a GET request without any data to see if the chunk has already been uploaded in a previous session\n\n      $.test = function () {\n        // Set up request and listen for event\n        $.xhr = new XMLHttpRequest();\n\n        var testHandler = function testHandler(e) {\n          $.tested = true;\n          var status = $.status();\n\n          if (status == 'success') {\n            $.callback(status, $.message());\n            $.resumableObj.uploadNextChunk();\n          } else {\n            $.send();\n          }\n        };\n\n        $.xhr.addEventListener('load', testHandler, false);\n        $.xhr.addEventListener('error', testHandler, false);\n        $.xhr.addEventListener('timeout', testHandler, false); // Add data from the query options\n\n        var params = [];\n        var parameterNamespace = $.getOpt('parameterNamespace');\n        var customQuery = $.getOpt('query');\n        if (typeof customQuery == 'function') customQuery = customQuery($.fileObj, $);\n        $h.each(customQuery, function (k, v) {\n          params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\n        }); // Add extra data to identify chunk\n\n        params = params.concat([// define key/value pairs for additional parameters\n        ['chunkNumberParameterName', $.offset + 1], ['chunkSizeParameterName', $.getOpt('chunkSize')], ['currentChunkSizeParameterName', $.endByte - $.startByte], ['totalSizeParameterName', $.fileObjSize], ['typeParameterName', $.fileObjType], ['identifierParameterName', $.fileObj.uniqueIdentifier], ['fileNameParameterName', $.fileObj.fileName], ['relativePathParameterName', $.fileObj.relativePath], ['totalChunksParameterName', $.fileObj.chunks.length]].filter(function (pair) {\n          // include items that resolve to truthy values\n          // i.e. exclude false, null, undefined and empty strings\n          return $.getOpt(pair[0]);\n        }).map(function (pair) {\n          // map each key/value pair to its final form\n          return [parameterNamespace + $.getOpt(pair[0]), encodeURIComponent(pair[1])].join('=');\n        })); // Append the relevant chunk and send it\n\n        $.xhr.open($.getOpt('testMethod'), $h.getTarget('test', params));\n        $.xhr.timeout = $.getOpt('xhrTimeout');\n        $.xhr.withCredentials = $.getOpt('withCredentials'); // Add data from header options\n\n        var customHeaders = $.getOpt('headers');\n\n        if (typeof customHeaders === 'function') {\n          customHeaders = customHeaders($.fileObj, $);\n        }\n\n        $h.each(customHeaders, function (k, v) {\n          $.xhr.setRequestHeader(k, v);\n        });\n        $.xhr.send(null);\n      };\n\n      $.preprocessFinished = function () {\n        $.preprocessState = 2;\n        $.send();\n      }; // send() uploads the actual data in a POST call\n\n\n      $.send = function () {\n        var preprocess = $.getOpt('preprocess');\n\n        if (typeof preprocess === 'function') {\n          switch ($.preprocessState) {\n            case 0:\n              $.preprocessState = 1;\n              preprocess($);\n              return;\n\n            case 1:\n              return;\n\n            case 2:\n              break;\n          }\n        }\n\n        if ($.getOpt('testChunks') && !$.tested) {\n          $.test();\n          return;\n        } // Set up request and listen for event\n\n\n        $.xhr = new XMLHttpRequest(); // Progress\n\n        $.xhr.upload.addEventListener('progress', function (e) {\n          if (new Date() - $.lastProgressCallback > $.getOpt('throttleProgressCallbacks') * 1000) {\n            $.callback('progress');\n            $.lastProgressCallback = new Date();\n          }\n\n          $.loaded = e.loaded || 0;\n        }, false);\n        $.loaded = 0;\n        $.pendingRetry = false;\n        $.callback('progress'); // Done (either done, failed or retry)\n\n        var doneHandler = function doneHandler(e) {\n          var status = $.status();\n\n          if (status == 'success' || status == 'error') {\n            $.callback(status, $.message());\n            $.resumableObj.uploadNextChunk();\n          } else {\n            $.callback('retry', $.message());\n            $.abort();\n            $.retries++;\n            var retryInterval = $.getOpt('chunkRetryInterval');\n\n            if (retryInterval !== undefined) {\n              $.pendingRetry = true;\n              setTimeout($.send, retryInterval);\n            } else {\n              $.send();\n            }\n          }\n        };\n\n        $.xhr.addEventListener('load', doneHandler, false);\n        $.xhr.addEventListener('error', doneHandler, false);\n        $.xhr.addEventListener('timeout', doneHandler, false); // Set up the basic query data from Resumable\n\n        var query = [['chunkNumberParameterName', $.offset + 1], ['chunkSizeParameterName', $.getOpt('chunkSize')], ['currentChunkSizeParameterName', $.endByte - $.startByte], ['totalSizeParameterName', $.fileObjSize], ['typeParameterName', $.fileObjType], ['identifierParameterName', $.fileObj.uniqueIdentifier], ['fileNameParameterName', $.fileObj.fileName], ['relativePathParameterName', $.fileObj.relativePath], ['totalChunksParameterName', $.fileObj.chunks.length]].filter(function (pair) {\n          // include items that resolve to truthy values\n          // i.e. exclude false, null, undefined and empty strings\n          return $.getOpt(pair[0]);\n        }).reduce(function (query, pair) {\n          // assign query key/value\n          query[$.getOpt(pair[0])] = pair[1];\n          return query;\n        }, {}); // Mix in custom data\n\n        var customQuery = $.getOpt('query');\n        if (typeof customQuery == 'function') customQuery = customQuery($.fileObj, $);\n        $h.each(customQuery, function (k, v) {\n          query[k] = v;\n        });\n        var func = $.fileObj.file.slice ? 'slice' : $.fileObj.file.mozSlice ? 'mozSlice' : $.fileObj.file.webkitSlice ? 'webkitSlice' : 'slice';\n        var bytes = $.fileObj.file[func]($.startByte, $.endByte, $.getOpt('setChunkTypeFromFile') ? $.fileObj.file.type : \"\");\n        var data = null;\n        var params = [];\n        var parameterNamespace = $.getOpt('parameterNamespace');\n\n        if ($.getOpt('method') === 'octet') {\n          // Add data from the query options\n          data = bytes;\n          $h.each(query, function (k, v) {\n            params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\n          });\n        } else {\n          // Add data from the query options\n          data = new FormData();\n          $h.each(query, function (k, v) {\n            data.append(parameterNamespace + k, v);\n            params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\n          });\n\n          if ($.getOpt('chunkFormat') == 'blob') {\n            data.append(parameterNamespace + $.getOpt('fileParameterName'), bytes, $.fileObj.fileName);\n          } else if ($.getOpt('chunkFormat') == 'base64') {\n            var fr = new FileReader();\n\n            fr.onload = function (e) {\n              data.append(parameterNamespace + $.getOpt('fileParameterName'), fr.result);\n              $.xhr.send(data);\n            };\n\n            fr.readAsDataURL(bytes);\n          }\n        }\n\n        var target = $h.getTarget('upload', params);\n        var method = $.getOpt('uploadMethod');\n        $.xhr.open(method, target);\n\n        if ($.getOpt('method') === 'octet') {\n          $.xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n        }\n\n        $.xhr.timeout = $.getOpt('xhrTimeout');\n        $.xhr.withCredentials = $.getOpt('withCredentials'); // Add data from header options\n\n        var customHeaders = $.getOpt('headers');\n\n        if (typeof customHeaders === 'function') {\n          customHeaders = customHeaders($.fileObj, $);\n        }\n\n        $h.each(customHeaders, function (k, v) {\n          $.xhr.setRequestHeader(k, v);\n        });\n\n        if ($.getOpt('chunkFormat') == 'blob') {\n          $.xhr.send(data);\n        }\n      };\n\n      $.abort = function () {\n        // Abort and reset\n        if ($.xhr) $.xhr.abort();\n        $.xhr = null;\n      };\n\n      $.status = function () {\n        // Returns: 'pending', 'uploading', 'success', 'error'\n        if ($.pendingRetry) {\n          // if pending retry then that's effectively the same as actively uploading,\n          // there might just be a slight delay before the retry starts\n          return 'uploading';\n        } else if (!$.xhr) {\n          return 'pending';\n        } else if ($.xhr.readyState < 4) {\n          // Status is really 'OPENED', 'HEADERS_RECEIVED' or 'LOADING' - meaning that stuff is happening\n          return 'uploading';\n        } else {\n          if ($.xhr.status == 200 || $.xhr.status == 201) {\n            // HTTP 200, 201 (created)\n            return 'success';\n          } else if ($h.contains($.getOpt('permanentErrors'), $.xhr.status) || $.retries >= $.getOpt('maxChunkRetries')) {\n            // HTTP 415/500/501, permanent error\n            return 'error';\n          } else {\n            // this should never happen, but we'll reset and queue a retry\n            // a likely case for this would be 503 service unavailable\n            $.abort();\n            return 'pending';\n          }\n        }\n      };\n\n      $.message = function () {\n        return $.xhr ? $.xhr.responseText : '';\n      };\n\n      $.progress = function (relative) {\n        if (typeof relative === 'undefined') relative = false;\n        var factor = relative ? ($.endByte - $.startByte) / $.fileObjSize : 1;\n        if ($.pendingRetry) return 0;\n        if (!$.xhr || !$.xhr.status) factor *= .95;\n        var s = $.status();\n\n        switch (s) {\n          case 'success':\n          case 'error':\n            return 1 * factor;\n\n          case 'pending':\n            return 0 * factor;\n\n          default:\n            return $.loaded / ($.endByte - $.startByte) * factor;\n        }\n      };\n\n      return this;\n    } // QUEUE\n\n\n    $.uploadNextChunk = function () {\n      var found = false; // In some cases (such as videos) it's really handy to upload the first\n      // and last chunk of a file quickly; this let's the server check the file's\n      // metadata and determine if there's even a point in continuing.\n\n      if ($.getOpt('prioritizeFirstAndLastChunk')) {\n        $h.each($.files, function (file) {\n          if (file.chunks.length && file.chunks[0].status() == 'pending' && file.chunks[0].preprocessState === 0) {\n            file.chunks[0].send();\n            found = true;\n            return false;\n          }\n\n          if (file.chunks.length > 1 && file.chunks[file.chunks.length - 1].status() == 'pending' && file.chunks[file.chunks.length - 1].preprocessState === 0) {\n            file.chunks[file.chunks.length - 1].send();\n            found = true;\n            return false;\n          }\n        });\n        if (found) return true;\n      } // Now, simply look for the next, best thing to upload\n\n\n      $h.each($.files, function (file) {\n        if (file.isPaused() === false) {\n          $h.each(file.chunks, function (chunk) {\n            if (chunk.status() == 'pending' && chunk.preprocessState === 0) {\n              chunk.send();\n              found = true;\n              return false;\n            }\n          });\n        }\n\n        if (found) return false;\n      });\n      if (found) return true; // The are no more outstanding chunks to upload, check is everything is done\n\n      var outstanding = false;\n      $h.each($.files, function (file) {\n        if (!file.isComplete()) {\n          outstanding = true;\n          return false;\n        }\n      });\n\n      if (!outstanding) {\n        // All chunks have been uploaded, complete\n        $.fire('complete');\n      }\n\n      return false;\n    }; // PUBLIC METHODS FOR RESUMABLE.JS\n\n\n    $.assignBrowse = function (domNodes, isDirectory) {\n      if (typeof domNodes.length == 'undefined') domNodes = [domNodes];\n      $h.each(domNodes, function (domNode) {\n        var input;\n\n        if (domNode.tagName === 'INPUT' && domNode.type === 'file') {\n          input = domNode;\n        } else {\n          input = document.createElement('input');\n          input.setAttribute('type', 'file');\n          input.style.display = 'none';\n          domNode.addEventListener('click', function () {\n            input.style.opacity = 0;\n            input.style.display = 'block';\n            input.focus();\n            input.click();\n            input.style.display = 'none';\n          }, false);\n          domNode.appendChild(input);\n        }\n\n        var maxFiles = $.getOpt('maxFiles');\n\n        if (typeof maxFiles === 'undefined' || maxFiles != 1) {\n          input.setAttribute('multiple', 'multiple');\n        } else {\n          input.removeAttribute('multiple');\n        }\n\n        if (isDirectory) {\n          input.setAttribute('webkitdirectory', 'webkitdirectory');\n        } else {\n          input.removeAttribute('webkitdirectory');\n        }\n\n        var fileTypes = $.getOpt('fileType');\n\n        if (typeof fileTypes !== 'undefined' && fileTypes.length >= 1) {\n          input.setAttribute('accept', fileTypes.map(function (e) {\n            return '.' + e;\n          }).join(','));\n        } else {\n          input.removeAttribute('accept');\n        } // When new files are added, simply append them to the overall list\n\n\n        input.addEventListener('change', function (e) {\n          appendFilesFromFileList(e.target.files, e);\n          var clearInput = $.getOpt('clearInput');\n\n          if (clearInput) {\n            e.target.value = '';\n          }\n        }, false);\n      });\n    };\n\n    $.assignDrop = function (domNodes) {\n      if (typeof domNodes.length == 'undefined') domNodes = [domNodes];\n      $h.each(domNodes, function (domNode) {\n        domNode.addEventListener('dragover', preventDefault, false);\n        domNode.addEventListener('dragenter', preventDefault, false);\n        domNode.addEventListener('drop', onDrop, false);\n      });\n    };\n\n    $.unAssignDrop = function (domNodes) {\n      if (typeof domNodes.length == 'undefined') domNodes = [domNodes];\n      $h.each(domNodes, function (domNode) {\n        domNode.removeEventListener('dragover', preventDefault);\n        domNode.removeEventListener('dragenter', preventDefault);\n        domNode.removeEventListener('drop', onDrop);\n      });\n    };\n\n    $.isUploading = function () {\n      var uploading = false;\n      $h.each($.files, function (file) {\n        if (file.isUploading()) {\n          uploading = true;\n          return false;\n        }\n      });\n      return uploading;\n    };\n\n    $.upload = function () {\n      // Make sure we don't start too many uploads at once\n      if ($.isUploading()) return; // Kick off the queue\n\n      $.fire('uploadStart');\n\n      for (var num = 1; num <= $.getOpt('simultaneousUploads'); num++) {\n        $.uploadNextChunk();\n      }\n    };\n\n    $.pause = function () {\n      // Resume all chunks currently being uploaded\n      $h.each($.files, function (file) {\n        file.abort();\n      });\n      $.fire('pause');\n    };\n\n    $.cancel = function () {\n      $.fire('beforeCancel');\n\n      for (var i = $.files.length - 1; i >= 0; i--) {\n        $.files[i].cancel();\n      }\n\n      $.fire('cancel');\n    };\n\n    $.progress = function () {\n      var totalDone = 0;\n      var totalSize = 0; // Resume all chunks currently being uploaded\n\n      $h.each($.files, function (file) {\n        totalDone += file.progress() * file.size;\n        totalSize += file.size;\n      });\n      return totalSize > 0 ? totalDone / totalSize : 0;\n    };\n\n    $.addFile = function (file, event) {\n      appendFilesFromFileList([file], event);\n    };\n\n    $.addFiles = function (files, event) {\n      appendFilesFromFileList(files, event);\n    };\n\n    $.removeFile = function (file) {\n      for (var i = $.files.length - 1; i >= 0; i--) {\n        if ($.files[i] === file) {\n          $.files.splice(i, 1);\n        }\n      }\n    };\n\n    $.getFromUniqueIdentifier = function (uniqueIdentifier) {\n      var ret = false;\n      $h.each($.files, function (f) {\n        if (f.uniqueIdentifier == uniqueIdentifier) ret = f;\n      });\n      return ret;\n    };\n\n    $.getSize = function () {\n      var totalSize = 0;\n      $h.each($.files, function (file) {\n        totalSize += file.size;\n      });\n      return totalSize;\n    };\n\n    $.handleDropEvent = function (e) {\n      onDrop(e);\n    };\n\n    $.handleChangeEvent = function (e) {\n      appendFilesFromFileList(e.target.files, e);\n      e.target.value = '';\n    };\n\n    $.updateQuery = function (query) {\n      $.opts.query = query;\n    };\n\n    return this;\n  }; // Node.js-style export for Node and Component\n\n\n  if (typeof module != 'undefined') {\n    module.exports = Resumable;\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD/requirejs: Define the module\n    define(function () {\n      return Resumable;\n    });\n  } else {\n    // Browser: Expose to window\n    window.Resumable = Resumable;\n  }\n})();","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.any,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'h5'\n};\n\nvar ListGroupItemHeading = function ListGroupItemHeading(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'list-group-item-heading'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nListGroupItemHeading.propTypes = propTypes;\nListGroupItemHeading.defaultProps = defaultProps;\nexport default ListGroupItemHeading;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.any,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'p'\n};\n\nvar ListGroupItemText = function ListGroupItemText(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'list-group-item-text'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nListGroupItemText.propTypes = propTypes;\nListGroupItemText.defaultProps = defaultProps;\nexport default ListGroupItemText;"],"sourceRoot":""}