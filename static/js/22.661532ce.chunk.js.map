{"version":3,"sources":["views/eshop/MessageList/MessageList.js"],"names":["MessageList","props","_this","Object","E_working_dir_flycat_flycat_portal_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","E_working_dir_flycat_flycat_portal_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","E_working_dir_flycat_flycat_portal_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","page","list","account","loadLocalAccount","secret","loadAll","_this2","data","type","rsId","doMessage","ok","setState","bind","_this3","map","res","d","Date","setTime","time","btime","toLocaleString","update","block","length","substring","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","_conponents_AccountDialog_AccountDialog__WEBPACK_IMPORTED_MODULE_19__","from","to","renderDecBtn","_conponents_MessageDialog_MessageDialog__WEBPACK_IMPORTED_MODULE_21__","toPk","pk","decrypt","reactstrap__WEBPACK_IMPORTED_MODULE_14__","isOpen","toggle","toggleDecrypt","className","reactstrap__WEBPACK_IMPORTED_MODULE_15__","reactstrap__WEBPACK_IMPORTED_MODULE_16__","react_quill__WEBPACK_IMPORTED_MODULE_22___default","value","clearMsg","reactstrap__WEBPACK_IMPORTED_MODULE_17__","reactstrap__WEBPACK_IMPORTED_MODULE_12__","color","onClick","msg","_this4","size","e","shareDecrypt","nonce","_this5","reactstrap__WEBPACK_IMPORTED_MODULE_6__","reactstrap__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_8__","hover","bordered","striped","responsive","renderMessageList","renderClearMsgDialog","reactstrap__WEBPACK_IMPORTED_MODULE_9__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","previous","tag","prePage","active","next","nextPage","reactstrap__WEBPACK_IMPORTED_MODULE_13__","Component"],"mappings":"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","file":"static/js/22.661532ce.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Badge, Card, CardBody, CardHeader, Col, Pagination, PaginationItem, PaginationLink, Row, Table } from 'reactstrap';\r\nimport { Button, Input, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\r\nimport { CardGroup, Container, Form, FormGroup, Fade, Alert, Label } from 'reactstrap'\r\nimport { Modal, ModalBody, ModalFooter, ModalHeader, ButtonDropdown, DropdownItem, DropdownMenu, DropdownToggle } from 'reactstrap'\r\nimport { shareDecrypt, doMessage } from '../eshop'\r\nimport AccountDialog from '../../conponents/AccountDialog/AccountDialog'\r\nimport { loadLocalAccount, sign } from '../../ggv/js/gegeUtil'\r\nimport MessageDialog from '../../conponents/MessageDialog/MessageDialog'\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\n\r\n\r\nclass MessageList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { page: 1, list: [] }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let account = loadLocalAccount();\r\n    if (account && account.secret) {\r\n      this.secret = account.secret;\r\n      this.account = account;\r\n    }\r\n    if (this.account)\r\n      this.loadAll()\r\n  }\r\n\r\n  loadAll() {\r\n    let data = { type: 'list', rsId: this.account.rsId, page: this.state.page }\r\n    doMessage(data, ((ok, data) => {\r\n      if (ok && data.ok && data.list) {\r\n        this.setState({ list: data.list })\r\n      }\r\n    }).bind(this))\r\n  }\r\n\r\n  prePage() {\r\n    this.state.page--\r\n    this.loadAll()\r\n  }\r\n\r\n  nextPage() {\r\n    this.state.page++\r\n    this.loadAll()\r\n  }\r\n\r\n  renderMessageList() {\r\n    let list = this.state.list;\r\n    if (!list)\r\n      return null;\r\n    let content = list.map((res) => {\r\n      let d = new Date();\r\n      d.setTime(res.time)\r\n      let btime = d.toLocaleString()\r\n      //\r\n      d.setTime(res.update)\r\n      let update = d.toLocaleString()\r\n      //block\r\n      let block = res.block;\r\n      if (block.length > 50) {\r\n        block = block.substring(0, 40) + \" ...\"\r\n      }\r\n      return (<tr>\r\n        <td><AccountDialog rsId={res.from} /></td>\r\n        <td><AccountDialog rsId={res.to} /></td>\r\n        <td>{block}</td>\r\n        <td>{btime}</td>\r\n        <td><div>{this.renderDecBtn(res)}<MessageDialog to={res.from} toPk={res.pk} /></div></td>\r\n      </tr>)\r\n    });\r\n\r\n    return content;\r\n  }\r\n\r\n  toggleDecrypt() {\r\n    this.setState({\r\n      decrypt: !this.state.decrypt,\r\n    });\r\n  }\r\n\r\n  renderClearMsgDialog() {\r\n    return (<Modal isOpen={this.state.decrypt} toggle={this.toggleDecrypt.bind(this)}\r\n      className={'modal-info ' + this.props.className}>\r\n      <ModalHeader toggle={this.toggleDecrypt.bind(this)}>Decrypt(消息解密</ModalHeader>\r\n      <ModalBody>\r\n        <ReactQuill value={this.state.clearMsg} />\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button color=\"info\" onClick={this.toggleDecrypt.bind(this)}>OK</Button>\r\n      </ModalFooter>\r\n    </Modal>)\r\n  }\r\n\r\n  renderDecBtn(msg) {\r\n    return (<Button color=\"primary\" size='sm' onClick={((e) => {\r\n      let clearMsg = shareDecrypt(this.secret, msg.pk, msg.nonce, msg.block)\r\n\r\n      this.setState({ clearMsg, decrypt: true })\r\n    }).bind(this)}>\r\n      Dec(解密)\r\n   </Button>)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardBody>\r\n          <Table hover bordered striped responsive size=\"sm\">\r\n            <thead>\r\n              <tr>\r\n                <th>发送方</th>\r\n                <th>接收方</th>\r\n                <th>加密消息</th>\r\n                <th>时间</th>\r\n                <th>操作</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.renderMessageList()}\r\n              {this.renderClearMsgDialog()}\r\n            </tbody>\r\n          </Table>\r\n          <nav>\r\n            <Pagination>\r\n              <PaginationItem><PaginationLink previous tag=\"button\" onClick={(e) => { this.prePage() }}>上一页</PaginationLink></PaginationItem>\r\n              <PaginationItem active>\r\n                <PaginationLink tag=\"button\">{this.state.page}</PaginationLink>\r\n              </PaginationItem>\r\n              <PaginationItem><PaginationLink next tag=\"button\" onClick={(e) => { this.nextPage() }}>下一页</PaginationLink></PaginationItem>\r\n            </Pagination>\r\n          </nav>\r\n          <Alert color=\"info\"><small>所有消息都带有数字签名与时间戳。天然具有不可伪造，不可抵赖、不可篡改特性。</small></Alert>\r\n          <Alert color=\"info\"><small>账户金额全部大于0的两个账户之间才可以发送消息.消息加密后只有双方可以解密，任何其他人都无法查看.</small></Alert>\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageList;\r\n"],"sourceRoot":""}